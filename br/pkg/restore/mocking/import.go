// Code generated by MockGen. DO NOT EDIT.
// Source: ./br/pkg/restore/import.go

// Package mock_restore is a generated GoMock package.
package mock_restore

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	import_sstpb "github.com/pingcap/kvproto/pkg/import_sstpb"
)

// MockImporterClient is a mock of ImporterClient interface.
type MockImporterClient struct {
	ctrl     *gomock.Controller
	recorder *MockImporterClientMockRecorder
}

// MockImporterClientMockRecorder is the mock recorder for MockImporterClient.
type MockImporterClientMockRecorder struct {
	mock *MockImporterClient
}

// NewMockImporterClient creates a new mock instance.
func NewMockImporterClient(ctrl *gomock.Controller) *MockImporterClient {
	mock := &MockImporterClient{ctrl: ctrl}
	mock.recorder = &MockImporterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImporterClient) EXPECT() *MockImporterClientMockRecorder {
	return m.recorder
}

// ApplyKVFile mocks base method.
func (m *MockImporterClient) ApplyKVFile(ctx context.Context, storeID uint64, req *import_sstpb.ApplyRequest) (*import_sstpb.ApplyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyKVFile", ctx, storeID, req)
	ret0, _ := ret[0].(*import_sstpb.ApplyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyKVFile indicates an expected call of ApplyKVFile.
func (mr *MockImporterClientMockRecorder) ApplyKVFile(ctx, storeID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyKVFile", reflect.TypeOf((*MockImporterClient)(nil).ApplyKVFile), ctx, storeID, req)
}

// ClearFiles mocks base method.
func (m *MockImporterClient) ClearFiles(ctx context.Context, storeID uint64, req *import_sstpb.ClearRequest) (*import_sstpb.ClearResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearFiles", ctx, storeID, req)
	ret0, _ := ret[0].(*import_sstpb.ClearResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearFiles indicates an expected call of ClearFiles.
func (mr *MockImporterClientMockRecorder) ClearFiles(ctx, storeID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearFiles", reflect.TypeOf((*MockImporterClient)(nil).ClearFiles), ctx, storeID, req)
}

// DownloadSST mocks base method.
func (m *MockImporterClient) DownloadSST(ctx context.Context, storeID uint64, req *import_sstpb.DownloadRequest) (*import_sstpb.DownloadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadSST", ctx, storeID, req)
	ret0, _ := ret[0].(*import_sstpb.DownloadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadSST indicates an expected call of DownloadSST.
func (mr *MockImporterClientMockRecorder) DownloadSST(ctx, storeID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadSST", reflect.TypeOf((*MockImporterClient)(nil).DownloadSST), ctx, storeID, req)
}

// GetImportClient mocks base method.
func (m *MockImporterClient) GetImportClient(ctx context.Context, storeID uint64) (import_sstpb.ImportSSTClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImportClient", ctx, storeID)
	ret0, _ := ret[0].(import_sstpb.ImportSSTClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImportClient indicates an expected call of GetImportClient.
func (mr *MockImporterClientMockRecorder) GetImportClient(ctx, storeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImportClient", reflect.TypeOf((*MockImporterClient)(nil).GetImportClient), ctx, storeID)
}

// IngestSST mocks base method.
func (m *MockImporterClient) IngestSST(ctx context.Context, storeID uint64, req *import_sstpb.IngestRequest) (*import_sstpb.IngestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestSST", ctx, storeID, req)
	ret0, _ := ret[0].(*import_sstpb.IngestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestSST indicates an expected call of IngestSST.
func (mr *MockImporterClientMockRecorder) IngestSST(ctx, storeID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestSST", reflect.TypeOf((*MockImporterClient)(nil).IngestSST), ctx, storeID, req)
}

// MultiIngest mocks base method.
func (m *MockImporterClient) MultiIngest(ctx context.Context, storeID uint64, req *import_sstpb.MultiIngestRequest) (*import_sstpb.IngestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiIngest", ctx, storeID, req)
	ret0, _ := ret[0].(*import_sstpb.IngestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiIngest indicates an expected call of MultiIngest.
func (mr *MockImporterClientMockRecorder) MultiIngest(ctx, storeID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiIngest", reflect.TypeOf((*MockImporterClient)(nil).MultiIngest), ctx, storeID, req)
}

// SetDownloadSpeedLimit mocks base method.
func (m *MockImporterClient) SetDownloadSpeedLimit(ctx context.Context, storeID uint64, req *import_sstpb.SetDownloadSpeedLimitRequest) (*import_sstpb.SetDownloadSpeedLimitResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDownloadSpeedLimit", ctx, storeID, req)
	ret0, _ := ret[0].(*import_sstpb.SetDownloadSpeedLimitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDownloadSpeedLimit indicates an expected call of SetDownloadSpeedLimit.
func (mr *MockImporterClientMockRecorder) SetDownloadSpeedLimit(ctx, storeID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDownloadSpeedLimit", reflect.TypeOf((*MockImporterClient)(nil).SetDownloadSpeedLimit), ctx, storeID, req)
}

// SupportMultiIngest mocks base method.
func (m *MockImporterClient) SupportMultiIngest(ctx context.Context, stores []uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportMultiIngest", ctx, stores)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SupportMultiIngest indicates an expected call of SupportMultiIngest.
func (mr *MockImporterClientMockRecorder) SupportMultiIngest(ctx, stores interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportMultiIngest", reflect.TypeOf((*MockImporterClient)(nil).SupportMultiIngest), ctx, stores)
}
